{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3498387,"sourceType":"datasetVersion","datasetId":2105627}],"dockerImageVersionId":30920,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-03T13:00:31.136729Z","iopub.execute_input":"2025-04-03T13:00:31.137306Z","iopub.status.idle":"2025-04-03T13:00:32.656084Z","shell.execute_reply.started":"2025-04-03T13:00:31.137270Z","shell.execute_reply":"2025-04-03T13:00:32.653969Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# import shutil\n# import os\n# print(\"WARNING: RUNNING THIS BLOCK WILL DELETE YOUR PREPROCESSED DIRECTORY! CONTINUE?\")\n# confirm = input(\"Y/N: \")\n# try:\n#     if confirm == \"Y\":\n#         shutil.rmtree(\"/kaggle/working/\", ignore_errors = True)\n#         os.remove(\"/kaggle/working/maestro_processed.h5\")\n# except:\n#     pass","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T12:48:51.461652Z","iopub.execute_input":"2025-04-04T12:48:51.461969Z","iopub.status.idle":"2025-04-04T12:48:56.582505Z","shell.execute_reply.started":"2025-04-04T12:48:51.461944Z","shell.execute_reply":"2025-04-04T12:48:56.581448Z"}},"outputs":[{"name":"stdout","text":"WARNING: RUNNING THIS BLOCK WILL DELETE YOUR PREPROCESSED DIRECTORY! CONTINUE?\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Y/N:  Y\n"}],"execution_count":8},{"cell_type":"code","source":"%pip install pretty_midi note_seq pandas numpy librosa h5py tqdm\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T12:40:34.052198Z","iopub.execute_input":"2025-04-04T12:40:34.052564Z","iopub.status.idle":"2025-04-04T12:41:03.552197Z","shell.execute_reply.started":"2025-04-04T12:40:34.052527Z","shell.execute_reply":"2025-04-04T12:41:03.550709Z"}},"outputs":[{"name":"stdout","text":"Collecting pretty_midi\n  Downloading pretty_midi-0.2.10.tar.gz (5.6 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.6/5.6 MB\u001b[0m \u001b[31m41.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\nCollecting note_seq\n  Downloading note_seq-0.0.5-py3-none-any.whl.metadata (1.1 kB)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.3)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\nRequirement already satisfied: librosa in /usr/local/lib/python3.10/dist-packages (0.10.2.post1)\nRequirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (3.12.1)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.67.1)\nCollecting mido>=1.1.16 (from pretty_midi)\n  Downloading mido-1.3.3-py3-none-any.whl.metadata (6.4 kB)\nRequirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from pretty_midi) (1.17.0)\nRequirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from note_seq) (1.4.0)\nRequirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from note_seq) (25.1.0)\nRequirement already satisfied: bokeh>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from note_seq) (3.6.2)\nCollecting intervaltree>=2.1.0 (from note_seq)\n  Downloading intervaltree-3.1.0.tar.gz (32 kB)\n  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\nRequirement already satisfied: IPython in /usr/local/lib/python3.10/dist-packages (from note_seq) (7.34.0)\nCollecting protobuf>=4.21.2 (from note_seq)\n  Downloading protobuf-6.30.2-cp39-abi3-manylinux2014_x86_64.whl.metadata (593 bytes)\nRequirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (from note_seq) (0.25.1)\nRequirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.10/dist-packages (from note_seq) (1.13.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2025.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy) (2.4.1)\nRequirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa) (3.0.1)\nRequirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.2.2)\nRequirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.4.2)\nRequirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.4.2)\nRequirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.60.0)\nRequirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.12.1)\nRequirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.8.2)\nRequirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.5.0.post1)\nRequirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.12.2)\nRequirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.4)\nRequirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.1.0)\nRequirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (3.1.4)\nRequirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (1.3.1)\nRequirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (24.2)\nRequirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (11.0.0)\nRequirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (6.0.2)\nRequirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (6.3.3)\nRequirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (2024.9.0)\nRequirement already satisfied: sortedcontainers<3.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from intervaltree>=2.1.0->note_seq) (2.4.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (4.3.6)\nRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (2.32.3)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa) (1.17.1)\nRequirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (75.1.0)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.19.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.7.5)\nRequirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (5.7.1)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (3.0.48)\nRequirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (2.19.1)\nRequirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (4.9.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy) (2024.2.0)\nRequirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy) (2024.2.0)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->IPython->note_seq) (0.8.4)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.9->bokeh>=0.12.0->note_seq) (3.0.2)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->IPython->note_seq) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->IPython->note_seq) (0.2.13)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2025.1.31)\nDownloading note_seq-0.0.5-py3-none-any.whl (209 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m209.4/209.4 kB\u001b[0m \u001b[31m10.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading mido-1.3.3-py3-none-any.whl (54 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.6/54.6 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading protobuf-6.30.2-cp39-abi3-manylinux2014_x86_64.whl (316 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.2/316.2 kB\u001b[0m \u001b[31m13.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hBuilding wheels for collected packages: pretty_midi, intervaltree\n  Building wheel for pretty_midi (setup.py) ... \u001b[?25l\u001b[?25hdone\n  Created wheel for pretty_midi: filename=pretty_midi-0.2.10-py3-none-any.whl size=5592287 sha256=17c980a3275a68e989f665afc4e2b8f3b646cfead6e960f298681607acbd0d59\n  Stored in directory: /root/.cache/pip/wheels/cd/a5/30/7b8b7f58709f5150f67f98fde4b891ebf0be9ef07a8af49f25\n  Building wheel for intervaltree (setup.py) ... \u001b[?25l\u001b[?25hdone\n  Created wheel for intervaltree: filename=intervaltree-3.1.0-py2.py3-none-any.whl size=26097 sha256=3394362d41bb79b537f499e33f94a92a68fd03a675004c0b0ebbba581e34dcb5\n  Stored in directory: /root/.cache/pip/wheels/fa/80/8c/43488a924a046b733b64de3fac99252674c892a4c3801c0a61\nSuccessfully built pretty_midi intervaltree\nInstalling collected packages: protobuf, mido, intervaltree, pretty_midi, note_seq\n  Attempting uninstall: protobuf\n    Found existing installation: protobuf 3.20.3\n    Uninstalling protobuf-3.20.3:\n      Successfully uninstalled protobuf-3.20.3\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ngoogle-ai-generativelanguage 0.6.10 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-api-core 1.34.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-aiplatform 1.74.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-bigquery-connection 1.17.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-bigtable 2.27.0 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\ngoogle-cloud-bigtable 2.27.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-datastore 2.20.2 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-firestore 2.19.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-functions 1.19.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-iam 2.17.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-language 2.16.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-pubsub 2.27.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-resource-manager 1.14.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-translate 3.12.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-videointelligence 2.16.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogle-cloud-vision 3.10.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngoogleapis-common-protos 1.66.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\ngrpc-google-iam-v1 0.13.1 requires protobuf!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\npandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\nproto-plus 1.25.0 requires protobuf<6.0.0dev,>=3.19.0, but you have protobuf 6.30.2 which is incompatible.\ntensorflow 2.17.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 6.30.2 which is incompatible.\ntensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, but you have tensorflow 2.17.1 which is incompatible.\ntensorflow-metadata 1.13.1 requires protobuf<5,>=3.20.3, but you have protobuf 6.30.2 which is incompatible.\nwandb 0.19.1 requires protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0; python_version > \"3.9\" and sys_platform == \"linux\", but you have protobuf 6.30.2 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed intervaltree-3.1.0 mido-1.3.3 note_seq-0.0.5 pretty_midi-0.2.10 protobuf-6.30.2\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import os\nimport numpy as np\nimport h5py\nimport librosa\nimport pretty_midi\nimport note_seq\nimport time\nimport gc\nfrom tqdm import tqdm\nimport pandas as pd  # Import pandas\nimport json  # Import json for metadata\nimport random\n\n# ## Configuration\nRAW_DATA_PATH = \"/kaggle/input/maestrov300-hdf5\"\nPROCESSED_DATA_PATH = \"/kaggle/working/\"\nSAMPLE_RATE = 16000  # Sample rate in Hz\nDURATION = 0.1 # Window size in seconds\nHOP_LENGTH = 1024  # Hop length for STFT\nN_FFT = 1024  # Number of FFT points\nN_MELS = 64  # Number of mel bands\nFMIN = 27.5  # Lowest piano key frequency (A0)\nFMAX = 4186.0  # Highest piano key frequency (C8)\nTOTAL_FRAMES_TO_SAVE = 50000\n\n# Assuming the metadata CSV file is in the RAW_DATA_PATH\nMETADATA_FILE = os.path.join(RAW_DATA_PATH, \"maestro-v3.0.0.csv\")\n\n# Load the metadata DataFrame\ntry:\n    maestro_df = pd.read_csv(METADATA_FILE)\nexcept FileNotFoundError:\n    print(f\"Error: Metadata file not found at {METADATA_FILE}. Please ensure the MAESTRO dataset CSV file is in the correct location.\")\n    exit()\n\n# Utility functions to handle audio and MIDI serialization\ndef float32_to_int16(x):\n    \"\"\"Convert float32 audio data to int16 format\"\"\"\n    return (x * 32767.).astype(np.int16)\n\ndef int16_to_float32(x):\n    \"\"\"Convert int16 audio data back to float32 format\"\"\"\n    return (x / 32767.).astype(np.float32)\n\n# ## Audio Preprocessing Functions\ndef load_audio_from_h5(h5_file, filename, sample_rate=SAMPLE_RATE):\n    \"\"\"Load audio data from the HDF5 file\"\"\"\n    audio_data = h5_file[f'{filename}/audio'][...]\n    return int16_to_float32(audio_data)\n\ndef load_midi_from_h5(h5_file, filename):\n    \"\"\"Load MIDI data from the HDF5 file\"\"\"\n    try:\n        midi_data = h5_file[f'{filename}/midi'][...]\n        if isinstance(midi_data, np.ndarray):\n            midi_data_bytes = midi_data.tobytes()\n        else:\n            midi_data_bytes = midi_data\n        midi = note_seq.NoteSequence.FromString(midi_data_bytes)\n        if midi is None:\n            print(f\"Warning: note_seq.NoteSequence.FromString() returned None for {filename}\")\n        return midi\n    except KeyError:\n        print(f\"Warning: MIDI key not found for {filename}\")\n        return None\n    except Exception as e:\n        print(f\"Warning: An error occurred while loading MIDI for {filename}: {e}\")\n        return None\n\ndef extract_windows(y, sr=SAMPLE_RATE, duration=DURATION, hop_duration=None):\n    \"\"\"Extract overlapping windows from the audio signal\"\"\"\n    window_size = int(sr * duration)\n    if hop_duration is None:\n        hop_duration = duration / 2\n    hop_size = int(sr * hop_duration)\n\n    pad_width = window_size - (len(y) % hop_size)\n    if pad_width < window_size:\n        y = np.pad(y, (0, pad_width))\n\n    windows = []\n    timestamps = []\n    for start in range(0, len(y) - window_size + 1, hop_size):\n        window = y[start:start + window_size]\n        windows.append(window)\n        timestamps.append(start / sr)\n\n    return np.array(windows), np.array(timestamps)\n\n# ## MIDI Processing Functions\ndef extract_piano_notes(midi):\n    \"\"\"Extract piano notes from a MIDI sequence\"\"\"\n    notes = []\n    for note in midi.notes:\n        # MIDI program numbers for piano are typically 0-7\n        if 0 <= note.program <= 7:\n            notes.append({\n                'pitch': note.pitch,\n                'start_time': note.start_time,\n                'end_time': note.end_time,\n                'velocity': note.velocity\n            })\n    return sorted(notes, key=lambda x: x['start_time'])\n\ndef create_note_labels(notes, timestamps, duration):\n    \"\"\"Create binary labels for piano notes\"\"\"\n    n_keys = 88\n    labels = np.zeros((len(timestamps), n_keys), dtype=np.uint8)\n    if not notes:\n        return labels\n\n    note_pitches = np.array([note['pitch'] - 21 for note in notes])\n    note_starts = np.array([note['start_time'] for note in notes]) # Changed 'start' to 'start_time'\n    note_ends = np.array([note['end_time'] for note in notes])   # Changed 'end' to 'end_time'\n\n    end_times = timestamps + duration\n    for i in range(len(timestamps)):\n        overlapping = (note_ends > timestamps[i]) & (note_starts < end_times[i])\n        labels[i, note_pitches[overlapping]] = 1\n\n    return labels\n\n# ## Feature Extraction Functions\ndef compute_mel_spectrogram(y, sr=SAMPLE_RATE, n_mels=N_MELS, n_fft=N_FFT, hop_length=HOP_LENGTH, fmin=FMIN, fmax=FMAX):\n    \"\"\"Compute the mel spectrogram from an audio signal\"\"\"\n    mel_fb = librosa.filters.mel(sr=sr, n_fft=n_fft, n_mels=n_mels, fmin=fmin, fmax=fmax)\n    D = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))**2\n    return np.dot(mel_fb, D)\n\n# ## Preprocessing Pipeline for Random Sampling\ndef preprocess_and_save_random_frames(h5_file, filename_base, output_dir, total_frames_saved, total_frames_to_save, sample_rate=SAMPLE_RATE, duration=DURATION, n_fft=N_FFT, hop_length=HOP_LENGTH, n_mels=N_MELS, fmin=FMIN, fmax=FMAX):\n    \"\"\"Process a single sample and save a random number of frames.\"\"\"\n    features_dir = os.path.join(output_dir, 'features')\n    labels_dir = os.path.join(output_dir, 'labels')\n    os.makedirs(features_dir, exist_ok=True)\n    os.makedirs(labels_dir, exist_ok=True)\n\n    # Load audio and MIDI data\n    audio = load_audio_from_h5(h5_file, filename_base, sample_rate)\n    midi = load_midi_from_h5(h5_file, filename_base)\n\n    if midi is None:\n        return 0\n\n    # Extract notes from the MIDI sequence\n    notes = extract_piano_notes(midi)\n\n    # Extract overlapping windows from the audio signal\n    windows, timestamps = extract_windows(audio, sr=sample_rate, duration=duration)\n\n    num_windows = len(windows)\n    frames_to_save_from_this_file = min(total_frames_to_save - total_frames_saved, num_windows)\n\n    if frames_to_save_from_this_file <= 0:\n        return 0\n\n    indices_to_save = random.sample(range(num_windows), frames_to_save_from_this_file)\n    frames_saved_count = 0\n\n    for index in indices_to_save:\n        window = windows[index]\n        timestamp = timestamps[index]\n        window_id = f\"{filename_base}_random_{total_frames_saved + frames_saved_count:06d}\" # Unique ID\n\n        # Create mel spectrogram for the audio window\n        mel_spectrogram = compute_mel_spectrogram(window, sr=sample_rate, n_mels=n_mels, n_fft=n_fft, hop_length=hop_length, fmin=fmin, fmax=FMAX)\n\n        # Create note labels for the window\n        labels = create_note_labels(notes, timestamps[index:index+1], duration)\n\n        # Save the features and labels\n        feature_path = os.path.join(features_dir, f\"{window_id}.npz\")\n        np.savez_compressed(feature_path, mel_spectrogram=mel_spectrogram)\n\n        label_path = os.path.join(labels_dir, f\"{window_id}.npy\")\n        np.save(label_path, labels)\n\n        frames_saved_count += 1\n\n    return frames_saved_count\n\n# ## Main Random Sampling Loop\ndef collect_random_frames(dataset_dir, processed_data_path, total_frames_to_save):\n    \"\"\"Collect a total of random frames from the dataset.\"\"\"\n    total_frames_saved = 0\n    output_dir = os.path.join(processed_data_path, 'random_frames')\n    os.makedirs(output_dir, exist_ok=True)\n\n    while total_frames_saved < total_frames_to_save:\n        random_index = random.randint(0, len(maestro_df) - 1)\n        random_row = maestro_df.iloc[random_index]\n        year = str(random_row['year'])\n        audio_filename_with_year = random_row['audio_filename']\n        filename_base = audio_filename_with_year.split('/')[-1][:-4]\n        h5_file_path = os.path.join(dataset_dir, f\"{year}.h5\")\n\n        try:\n            with h5py.File(h5_file_path, \"r\") as h5_file:\n                frames_saved = preprocess_and_save_random_frames(\n                    h5_file, filename_base, output_dir, total_frames_saved, total_frames_to_save\n                )\n                total_frames_saved += frames_saved\n                print(f\"Total frames saved: {total_frames_saved}/{total_frames_to_save}\", end='\\r')\n                if total_frames_saved >= total_frames_to_save:\n                    break\n        except FileNotFoundError:\n            print(f\"Error: HDF5 file not found for year {year} at {h5_file_path}. Skipping.\")\n        except Exception as e:\n            print(f\"An error occurred while processing {filename_base}: {e}\")\n\n    print(\"\\nFinished collecting random frames.\")\n\n# Run the random frame collection\ncollect_random_frames(RAW_DATA_PATH, PROCESSED_DATA_PATH, TOTAL_FRAMES_TO_SAVE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-04T12:49:26.725356Z","iopub.execute_input":"2025-04-04T12:49:26.725722Z"}},"outputs":[],"execution_count":null}]}