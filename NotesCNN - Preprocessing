{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "280e1b7b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-04T14:00:01.334532Z",
     "iopub.status.busy": "2025-04-04T14:00:01.334019Z",
     "iopub.status.idle": "2025-04-04T14:00:02.336405Z",
     "shell.execute_reply": "2025-04-04T14:00:02.335239Z"
    },
    "papermill": {
     "duration": 1.008338,
     "end_time": "2025-04-04T14:00:02.338361",
     "exception": false,
     "start_time": "2025-04-04T14:00:01.330023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/maestrov300-hdf5/2006.h5\n",
      "/kaggle/input/maestrov300-hdf5/2014.h5\n",
      "/kaggle/input/maestrov300-hdf5/2004.h5\n",
      "/kaggle/input/maestrov300-hdf5/LICENSE\n",
      "/kaggle/input/maestrov300-hdf5/maestro-v3.0.0.csv\n",
      "/kaggle/input/maestrov300-hdf5/README\n",
      "/kaggle/input/maestrov300-hdf5/2008.h5\n",
      "/kaggle/input/maestrov300-hdf5/2011.h5\n",
      "/kaggle/input/maestrov300-hdf5/2013.h5\n",
      "/kaggle/input/maestrov300-hdf5/2017.h5\n",
      "/kaggle/input/maestrov300-hdf5/maestro-v3.0.0.json\n",
      "/kaggle/input/maestrov300-hdf5/maestro-v3.0.0_tinymp3.csv\n",
      "/kaggle/input/maestrov300-hdf5/2018.h5\n",
      "/kaggle/input/maestrov300-hdf5/2009.h5\n",
      "/kaggle/input/maestrov300-hdf5/2015.h5\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "427f33d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T14:00:02.344646Z",
     "iopub.status.busy": "2025-04-04T14:00:02.344115Z",
     "iopub.status.idle": "2025-04-04T14:00:02.348158Z",
     "shell.execute_reply": "2025-04-04T14:00:02.347228Z"
    },
    "papermill": {
     "duration": 0.008748,
     "end_time": "2025-04-04T14:00:02.349801",
     "exception": false,
     "start_time": "2025-04-04T14:00:02.341053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import shutil\n",
    "# import os\n",
    "# print(\"WARNING: RUNNING THIS BLOCK WILL DELETE YOUR PREPROCESSED DIRECTORY! CONTINUE?\")\n",
    "# confirm = input(\"Y/N: \")\n",
    "# try:\n",
    "#     if confirm == \"Y\":\n",
    "#         shutil.rmtree(\"/kaggle/working/\", ignore_errors = True)\n",
    "#         os.remove(\"/kaggle/working/maestro_processed.h5\")\n",
    "# except:\n",
    "#     pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ba17708b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T14:00:02.355817Z",
     "iopub.status.busy": "2025-04-04T14:00:02.355429Z",
     "iopub.status.idle": "2025-04-04T14:00:30.801210Z",
     "shell.execute_reply": "2025-04-04T14:00:30.799731Z"
    },
    "papermill": {
     "duration": 28.450763,
     "end_time": "2025-04-04T14:00:30.802990",
     "exception": false,
     "start_time": "2025-04-04T14:00:02.352227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pretty_midi\r\n",
      "  Downloading pretty_midi-0.2.10.tar.gz (5.6 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.6/5.6 MB\u001b[0m \u001b[31m43.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Collecting note_seq\r\n",
      "  Downloading note_seq-0.0.5-py3-none-any.whl.metadata (1.1 kB)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.3)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\r\n",
      "Requirement already satisfied: librosa in /usr/local/lib/python3.10/dist-packages (0.10.2.post1)\r\n",
      "Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (3.12.1)\r\n",
      "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.67.1)\r\n",
      "Collecting mido>=1.1.16 (from pretty_midi)\r\n",
      "  Downloading mido-1.3.3-py3-none-any.whl.metadata (6.4 kB)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from pretty_midi) (1.17.0)\r\n",
      "Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from note_seq) (1.4.0)\r\n",
      "Requirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from note_seq) (25.1.0)\r\n",
      "Requirement already satisfied: bokeh>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from note_seq) (3.6.2)\r\n",
      "Collecting intervaltree>=2.1.0 (from note_seq)\r\n",
      "  Downloading intervaltree-3.1.0.tar.gz (32 kB)\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Requirement already satisfied: IPython in /usr/local/lib/python3.10/dist-packages (from note_seq) (7.34.0)\r\n",
      "Collecting protobuf>=4.21.2 (from note_seq)\r\n",
      "  Downloading protobuf-6.30.2-cp39-abi3-manylinux2014_x86_64.whl.metadata (593 bytes)\r\n",
      "Requirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (from note_seq) (0.25.1)\r\n",
      "Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.10/dist-packages (from note_seq) (1.13.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2025.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2025.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy) (2.4.1)\r\n",
      "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa) (3.0.1)\r\n",
      "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.2.2)\r\n",
      "Requirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.4.2)\r\n",
      "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.4.2)\r\n",
      "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.60.0)\r\n",
      "Requirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.12.1)\r\n",
      "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.8.2)\r\n",
      "Requirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.5.0.post1)\r\n",
      "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.12.2)\r\n",
      "Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.4)\r\n",
      "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.1.0)\r\n",
      "Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (3.1.4)\r\n",
      "Requirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (1.3.1)\r\n",
      "Requirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (24.2)\r\n",
      "Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (11.0.0)\r\n",
      "Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (6.0.2)\r\n",
      "Requirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (6.3.3)\r\n",
      "Requirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.10/dist-packages (from bokeh>=0.12.0->note_seq) (2024.9.0)\r\n",
      "Requirement already satisfied: sortedcontainers<3.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from intervaltree>=2.1.0->note_seq) (2.4.0)\r\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa) (0.43.0)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (4.3.6)\r\n",
      "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (2.32.3)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\r\n",
      "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa) (1.17.1)\r\n",
      "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (75.1.0)\r\n",
      "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.19.2)\r\n",
      "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.7.5)\r\n",
      "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (5.7.1)\r\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (3.0.48)\r\n",
      "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (2.19.1)\r\n",
      "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.2.0)\r\n",
      "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (0.1.7)\r\n",
      "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from IPython->note_seq) (4.9.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy) (2024.2.0)\r\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy) (2024.2.0)\r\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->IPython->note_seq) (0.8.4)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.9->bokeh>=0.12.0->note_seq) (3.0.2)\r\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->IPython->note_seq) (0.7.0)\r\n",
      "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->IPython->note_seq) (0.2.13)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2025.1.31)\r\n",
      "Downloading note_seq-0.0.5-py3-none-any.whl (209 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m209.4/209.4 kB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading mido-1.3.3-py3-none-any.whl (54 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.6/54.6 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading protobuf-6.30.2-cp39-abi3-manylinux2014_x86_64.whl (316 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.2/316.2 kB\u001b[0m \u001b[31m17.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: pretty_midi, intervaltree\r\n",
      "  Building wheel for pretty_midi (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Created wheel for pretty_midi: filename=pretty_midi-0.2.10-py3-none-any.whl size=5592287 sha256=68b4dde2cdad7444673eaa8fffd228d65d5403adcefa01dd9301319877d97a56\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/cd/a5/30/7b8b7f58709f5150f67f98fde4b891ebf0be9ef07a8af49f25\r\n",
      "  Building wheel for intervaltree (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Created wheel for intervaltree: filename=intervaltree-3.1.0-py2.py3-none-any.whl size=26097 sha256=97a68342771bc770e4f2c24db1e39f71ebf401525414493a31c01825de211d5e\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/fa/80/8c/43488a924a046b733b64de3fac99252674c892a4c3801c0a61\r\n",
      "Successfully built pretty_midi intervaltree\r\n",
      "Installing collected packages: protobuf, mido, intervaltree, pretty_midi, note_seq\r\n",
      "  Attempting uninstall: protobuf\r\n",
      "    Found existing installation: protobuf 3.20.3\r\n",
      "    Uninstalling protobuf-3.20.3:\r\n",
      "      Successfully uninstalled protobuf-3.20.3\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "google-ai-generativelanguage 0.6.10 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-api-core 1.34.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-aiplatform 1.74.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-bigquery-connection 1.17.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-bigtable 2.27.0 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "google-cloud-bigtable 2.27.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-datastore 2.20.2 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-firestore 2.19.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-functions 1.19.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-iam 2.17.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-language 2.16.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-pubsub 2.27.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-resource-manager 1.14.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-translate 3.12.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-videointelligence 2.16.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "google-cloud-vision 3.10.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "googleapis-common-protos 1.66.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "grpc-google-iam-v1 0.13.1 requires protobuf!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "pandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "proto-plus 1.25.0 requires protobuf<6.0.0dev,>=3.19.0, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "tensorflow 2.17.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, but you have tensorflow 2.17.1 which is incompatible.\r\n",
      "tensorflow-metadata 1.13.1 requires protobuf<5,>=3.20.3, but you have protobuf 6.30.2 which is incompatible.\r\n",
      "wandb 0.19.1 requires protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0; python_version > \"3.9\" and sys_platform == \"linux\", but you have protobuf 6.30.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed intervaltree-3.1.0 mido-1.3.3 note_seq-0.0.5 pretty_midi-0.2.10 protobuf-6.30.2\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install pretty_midi note_seq pandas numpy librosa h5py tqdm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0266e482",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T14:00:30.813375Z",
     "iopub.status.busy": "2025-04-04T14:00:30.812902Z",
     "iopub.status.idle": "2025-04-04T14:12:33.476788Z",
     "shell.execute_reply": "2025-04-04T14:12:33.475687Z"
    },
    "papermill": {
     "duration": 722.675515,
     "end_time": "2025-04-04T14:12:33.483012",
     "exception": false,
     "start_time": "2025-04-04T14:00:30.807497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total frames saved: 100000/100000\r\n",
      "Finished collecting random frames.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import h5py\n",
    "import librosa\n",
    "import pretty_midi\n",
    "import note_seq\n",
    "import time\n",
    "import gc\n",
    "from tqdm import tqdm\n",
    "import pandas as pd  # Import pandas\n",
    "import json  # Import json for metadata\n",
    "import random\n",
    "\n",
    "# ## Configuration\n",
    "RAW_DATA_PATH = \"/kaggle/input/maestrov300-hdf5\"\n",
    "PROCESSED_DATA_PATH = \"/kaggle/working/\"\n",
    "SAMPLE_RATE = 16000  # Sample rate in Hz\n",
    "DURATION = 0.2 # Window size in seconds\n",
    "HOP_LENGTH = 512  # Hop length for STFT\n",
    "N_FFT = 1024  # Number of FFT points\n",
    "N_MELS = 128  # Number of mel bands\n",
    "FMIN = 27.5  # Lowest piano key frequency (A0)\n",
    "FMAX = 4186.0  # Highest piano key frequency (C8)\n",
    "TOTAL_FRAMES_TO_SAVE = 100000\n",
    "\n",
    "# Assuming the metadata CSV file is in the RAW_DATA_PATH\n",
    "METADATA_FILE = os.path.join(RAW_DATA_PATH, \"maestro-v3.0.0.csv\")\n",
    "\n",
    "# Load the metadata DataFrame\n",
    "try:\n",
    "    maestro_df = pd.read_csv(METADATA_FILE)\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: Metadata file not found at {METADATA_FILE}. Please ensure the MAESTRO dataset CSV file is in the correct location.\")\n",
    "    exit()\n",
    "\n",
    "# Utility functions to handle audio and MIDI serialization\n",
    "def float32_to_int16(x):\n",
    "    \"\"\"Convert float32 audio data to int16 format\"\"\"\n",
    "    return (x * 32767.).astype(np.int16)\n",
    "\n",
    "def int16_to_float32(x):\n",
    "    \"\"\"Convert int16 audio data back to float32 format\"\"\"\n",
    "    return (x / 32767.).astype(np.float32)\n",
    "\n",
    "# ## Audio Preprocessing Functions\n",
    "def load_audio_from_h5(h5_file, filename, sample_rate=SAMPLE_RATE):\n",
    "    \"\"\"Load audio data from the HDF5 file\"\"\"\n",
    "    audio_data = h5_file[f'{filename}/audio'][...]\n",
    "    return int16_to_float32(audio_data)\n",
    "\n",
    "def load_midi_from_h5(h5_file, filename):\n",
    "    \"\"\"Load MIDI data from the HDF5 file\"\"\"\n",
    "    try:\n",
    "        midi_data = h5_file[f'{filename}/midi'][...]\n",
    "        if isinstance(midi_data, np.ndarray):\n",
    "            midi_data_bytes = midi_data.tobytes()\n",
    "        else:\n",
    "            midi_data_bytes = midi_data\n",
    "        midi = note_seq.NoteSequence.FromString(midi_data_bytes)\n",
    "        if midi is None:\n",
    "            print(f\"Warning: note_seq.NoteSequence.FromString() returned None for {filename}\")\n",
    "        return midi\n",
    "    except KeyError:\n",
    "        print(f\"Warning: MIDI key not found for {filename}\")\n",
    "        return None\n",
    "    except Exception as e:\n",
    "        print(f\"Warning: An error occurred while loading MIDI for {filename}: {e}\")\n",
    "        return None\n",
    "\n",
    "def extract_windows(y, sr=SAMPLE_RATE, duration=DURATION, hop_duration=None):\n",
    "    \"\"\"Extract overlapping windows from the audio signal\"\"\"\n",
    "    window_size = int(sr * duration)\n",
    "    if hop_duration is None:\n",
    "        hop_duration = duration / 2\n",
    "    hop_size = int(sr * hop_duration)\n",
    "\n",
    "    pad_width = window_size - (len(y) % hop_size)\n",
    "    if pad_width < window_size:\n",
    "        y = np.pad(y, (0, pad_width))\n",
    "\n",
    "    windows = []\n",
    "    timestamps = []\n",
    "    for start in range(0, len(y) - window_size + 1, hop_size):\n",
    "        window = y[start:start + window_size]\n",
    "        windows.append(window)\n",
    "        timestamps.append(start / sr)\n",
    "\n",
    "    return np.array(windows), np.array(timestamps)\n",
    "\n",
    "# ## MIDI Processing Functions\n",
    "def extract_piano_notes(midi):\n",
    "    \"\"\"Extract piano notes from a MIDI sequence\"\"\"\n",
    "    notes = []\n",
    "    for note in midi.notes:\n",
    "        # MIDI program numbers for piano are typically 0-7\n",
    "        if 0 <= note.program <= 7:\n",
    "            notes.append({\n",
    "                'pitch': note.pitch,\n",
    "                'start_time': note.start_time,\n",
    "                'end_time': note.end_time,\n",
    "                'velocity': note.velocity\n",
    "            })\n",
    "    return sorted(notes, key=lambda x: x['start_time'])\n",
    "\n",
    "def create_note_labels(notes, timestamps, duration):\n",
    "    \"\"\"Create binary labels for piano notes\"\"\"\n",
    "    n_keys = 88\n",
    "    labels = np.zeros((len(timestamps), n_keys), dtype=np.uint8)\n",
    "    if not notes:\n",
    "        return labels\n",
    "\n",
    "    note_pitches = np.array([note['pitch'] - 21 for note in notes])\n",
    "    note_starts = np.array([note['start_time'] for note in notes]) # Changed 'start' to 'start_time'\n",
    "    note_ends = np.array([note['end_time'] for note in notes])   # Changed 'end' to 'end_time'\n",
    "\n",
    "    end_times = timestamps + duration\n",
    "    for i in range(len(timestamps)):\n",
    "        overlapping = (note_ends > timestamps[i]) & (note_starts < end_times[i])\n",
    "        labels[i, note_pitches[overlapping]] = 1\n",
    "\n",
    "    return labels\n",
    "\n",
    "# ## Feature Extraction Functions\n",
    "def compute_mel_spectrogram(y, sr=SAMPLE_RATE, n_mels=N_MELS, n_fft=N_FFT, hop_length=HOP_LENGTH, fmin=FMIN, fmax=FMAX):\n",
    "    \"\"\"Compute the mel spectrogram from an audio signal\"\"\"\n",
    "    mel_fb = librosa.filters.mel(sr=sr, n_fft=n_fft, n_mels=n_mels, fmin=fmin, fmax=fmax)\n",
    "    D = np.abs(librosa.stft(y, n_fft=n_fft, hop_length=hop_length))**2\n",
    "    return np.dot(mel_fb, D)\n",
    "\n",
    "# ## Preprocessing Pipeline for Random Sampling\n",
    "def preprocess_and_save_random_frames(h5_file, filename_base, output_dir, total_frames_saved, total_frames_to_save, sample_rate=SAMPLE_RATE, duration=DURATION, n_fft=N_FFT, hop_length=HOP_LENGTH, n_mels=N_MELS, fmin=FMIN, fmax=FMAX):\n",
    "    \"\"\"Process a single sample and save a random number of frames.\"\"\"\n",
    "    features_dir = os.path.join(output_dir, 'features')\n",
    "    labels_dir = os.path.join(output_dir, 'labels')\n",
    "    os.makedirs(features_dir, exist_ok=True)\n",
    "    os.makedirs(labels_dir, exist_ok=True)\n",
    "\n",
    "    # Load audio and MIDI data\n",
    "    audio = load_audio_from_h5(h5_file, filename_base, sample_rate)\n",
    "    midi = load_midi_from_h5(h5_file, filename_base)\n",
    "\n",
    "    if midi is None:\n",
    "        return 0\n",
    "\n",
    "    # Extract notes from the MIDI sequence\n",
    "    notes = extract_piano_notes(midi)\n",
    "\n",
    "    # Extract overlapping windows from the audio signal\n",
    "    windows, timestamps = extract_windows(audio, sr=sample_rate, duration=duration)\n",
    "\n",
    "    num_windows = len(windows)\n",
    "    frames_to_save_from_this_file = min(total_frames_to_save - total_frames_saved, num_windows)\n",
    "\n",
    "    if frames_to_save_from_this_file <= 0:\n",
    "        return 0\n",
    "\n",
    "    indices_to_save = random.sample(range(num_windows), frames_to_save_from_this_file)\n",
    "    frames_saved_count = 0\n",
    "\n",
    "    for index in indices_to_save:\n",
    "        window = windows[index]\n",
    "        timestamp = timestamps[index]\n",
    "        window_id = f\"{filename_base}_random_{total_frames_saved + frames_saved_count:06d}\" # Unique ID\n",
    "\n",
    "        # Create mel spectrogram for the audio window\n",
    "        mel_spectrogram = compute_mel_spectrogram(window, sr=sample_rate, n_mels=n_mels, n_fft=n_fft, hop_length=hop_length, fmin=fmin, fmax=FMAX)\n",
    "\n",
    "        # Create note labels for the window\n",
    "        labels = create_note_labels(notes, timestamps[index:index+1], duration)\n",
    "\n",
    "        # Save the features and labels\n",
    "        feature_path = os.path.join(features_dir, f\"{window_id}.npz\")\n",
    "        np.savez_compressed(feature_path, mel_spectrogram=mel_spectrogram)\n",
    "\n",
    "        label_path = os.path.join(labels_dir, f\"{window_id}.npy\")\n",
    "        np.save(label_path, labels)\n",
    "\n",
    "        frames_saved_count += 1\n",
    "\n",
    "    return frames_saved_count\n",
    "\n",
    "# ## Main Random Sampling Loop\n",
    "def collect_random_frames(dataset_dir, processed_data_path, total_frames_to_save):\n",
    "    \"\"\"Collect a total of random frames from the dataset.\"\"\"\n",
    "    total_frames_saved = 0\n",
    "    output_dir = os.path.join(processed_data_path, 'random_frames')\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "    while total_frames_saved < total_frames_to_save:\n",
    "        random_index = random.randint(0, len(maestro_df) - 1)\n",
    "        random_row = maestro_df.iloc[random_index]\n",
    "        year = str(random_row['year'])\n",
    "        audio_filename_with_year = random_row['audio_filename']\n",
    "        filename_base = audio_filename_with_year.split('/')[-1][:-4]\n",
    "        h5_file_path = os.path.join(dataset_dir, f\"{year}.h5\")\n",
    "\n",
    "        try:\n",
    "            with h5py.File(h5_file_path, \"r\") as h5_file:\n",
    "                frames_saved = preprocess_and_save_random_frames(\n",
    "                    h5_file, filename_base, output_dir, total_frames_saved, total_frames_to_save\n",
    "                )\n",
    "                total_frames_saved += frames_saved\n",
    "                print(f\"Total frames saved: {total_frames_saved}/{total_frames_to_save}\", end='\\r')\n",
    "                if total_frames_saved >= total_frames_to_save:\n",
    "                    break\n",
    "        except FileNotFoundError:\n",
    "            print(f\"Error: HDF5 file not found for year {year} at {h5_file_path}. Skipping.\")\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred while processing {filename_base}: {e}\")\n",
    "\n",
    "    print(\"\\nFinished collecting random frames.\")\n",
    "\n",
    "# Run the random frame collection\n",
    "collect_random_frames(RAW_DATA_PATH, PROCESSED_DATA_PATH, TOTAL_FRAMES_TO_SAVE)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2105627,
     "sourceId": 3498387,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30920,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 756.265279,
   "end_time": "2025-04-04T14:12:34.812464",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-04T13:59:58.547185",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
